if [ "x$KIBANA_HOME" = "x" ]; then
    KIBANA_HOME="<%= @install_path %>/kibana"
fi

if [ "x$KIBANA_USER" = "x" ]; then
    KIBANA_USER="<%= @user %>"
fi

if [ "x$KIBANA_GROUP" = "x" ]; then
    KIBANA_GROUP="<%= @group %>"
fi

if [ "x$KIBANA_LOG" = "x" ]; then
    KIBANA_LOG="<%= @log_file %>"
fi

if [ "x$KIBANA_PID_FILE" = "x" ]; then
    KIBANA_PID_FILE="<%= @pid_file %>"
    KIBANA_PID_DIR="$(dirname $KIBANA_PID_FILE)"
fi

# Kibana writes the pid file on its own, so we need to give the kibana process the rights to edit it
prog="kibana"
pidfile=$KIBANA_PID_FILE
if [ $KIBANA_PID_DIR != "/var/run" ]; then
    mkdir -p $KIBANA_PID_DIR
    chown "$KIBANA_USER":"$KIBANA_GROUP" "$KIBANA_PID_DIR"
fi

touch $pidfile
chown "$KIBANA_USER":"$KIBANA_GROUP" "$pidfile"
chmod 640 "$pidfile"

touch $KIBANA_LOG
chown "$KIBANA_USER":"$KIBANA_GROUP" "$KIBANA_LOG"
chmod 640 "$KIBANA_LOG"

exec=$KIBANA_HOME/bin/$prog
lockfile=/var/lock/subsys/$prog

start() {

    [ -x $exec ] || exit 5
    echo -n $"Starting $prog: "
    # if not running, start it up here, usually something like "daemon $exec"
    daemon --user $KIBANA_USER --pidfile $pidfile $exec -p $pidfile 1>>"$KIBANA_LOG" 2>&1 &
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    killproc -p $pidfile -d 20 $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
